5+5
5+5
install.packages("learnr")
install.packages('ggplot2')
install.packages("tidyverse")
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
?mpg
install.packages('ggplot2')
library(ggplot2)
?mpg
install.packages("ggplot2")
install.packages(c("ggplot2","devtools","dplyr","stringr","maps","mapdata","ggmap"))
library(tidyverse)
library(sf)
library(tmap)
library(spData)
library(ggplot2)
library(ggmao)
library(tidyverse)
library(sf)
library(tmap)
library(spData)
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(tidyverse)
library(sf)
library(tmap)
library(spData)
library(ggplot2)
library(ggmap)
library(map)
library(tidyverse)
library(sf)
library(tmap)
library(spData)
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
# data from spData package
data("us_states")
# data from spData package
data("us_states")
ga <- us_states %% filter(NAME =="Georgia")
# data from spData package
data("us_states")
ga <- us_states %% filter('NAME' =="Georgia")
# data from spData package
data("us_states")
ga <- us_states %% filter(NAME == "Georgia")
# data from spData package
data("us_states")
ga <- "us_states" %% filter(NAME == "Georgia")
# data from spData package
data("us_states")
ga <- "us_states" %>% filter(NAME == "Georgia")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("./tl_2016_us_primaryroads.shp")
load("~/GitHub/myrepo/rtutorials/tl_2016_us_primaryroads/tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("./tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("C:\\Users\\lavgo\\Documents\\GitHub\\myrepo\\rtutorials\\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read(r"C:\\Users\\lavgo\\Documents\\GitHub\\myrepo\\rtutorials\\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("./tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read(".tl_2016_us_primaryroads/tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("C:\Users\lavgo\Documents\GitHub\myrepo\rtutorials\tl_2016_us_primaryroads\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read('C:\Users\lavgo\Documents\GitHub\myrepo\rtutorials\tl_2016_us_primaryroads\tl_2016_us_primaryroads.shp')
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("C:\Users\lavgo\Documents\GitHub\myrepo\rtutorials\tl_2016_us_primaryroads\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("C:\\Users\\lavgo\Documents\\GitHub\\myrepo\\rtutorials\\tl_2016_us_primaryroads\\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
path <-file.path("C:","Users","lavgo","GitHub","myrepo","rtutorials", fsep="\\")
roads <- st_read("C:\\Users\\lavgo\Documents\\GitHub\\myrepo\\rtutorials\\tl_2016_us_primaryroads\\tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
path <-file.path("C:","Users","lavgo","GitHub","myrepo","rtutorials", fsep="\\")
roads <- st_read("./tl_2016_us_primaryroads/tl_2016_us_primaryroads.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
path <-file.path("C:","Users","lavgo","GitHub","myrepo","rtutorials", fsep="\\")
roads <- st_read("./tl_2016_us_primaryroads/tl_2016_us_primaryroads.shp")
counties <- st_read(".Counties_Georgia/Counties_Georgia.shp")
# data from spData package
data("us_states")
ga <- us_states %>% filter(NAME == "Georgia")
path <-file.path("C:","Users","lavgo","GitHub","myrepo","rtutorials", fsep="\\")
roads <- st_read("./tl_2016_us_primaryroads/tl_2016_us_primaryroads.shp")
counties <- st_read("./Counties_Georgia/Counties_Georgia.shp")
proj <- "+proj=lcc +lat_1=31.41666666666667 +lat_2=34.28333333333333 +lat_0=0 +lon_0=-83.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
roads <- st_transform(roads, proj)
ga <- st_transform(ga, proj)
counties <- st_transform(counties, proj)
plot (st_geometry(ga))
plot (st_geometry(ga))
plot(st_geometry(counties))
plot (st_geometry(ga))
plot(st_geometry(counties), add=T, col="blue")
plot (st_geometry(ga))
plot(st_geometry(counties), add=T, col="blue")
plot (st_geometry(roads), add=T, col="black")
plot (st_geometry(ga))
plot(st_geometry(counties), add=T, col="blue")
roads <-st_crop(roads, ga)
plot (st_geometry(roads), add=T, col="black")
plot (st_geometry(ga))
plot(st_geometry(counties), add=T, col="blue")
roads <-st_crop(roads, ga)
plot (st_geometry(roads), add=T, col="black")
roads <- st_transform(roads, proj)
ga <- st_transform(ga, proj)
counties <- st_transform(counties, proj)
roads <-st_crop(roads, ga)
plot (st_geometry(ga))
plot(st_geometry(counties), add=T, col="blue")
plot (st_geometry(roads), add=T, col="black")
ggplot(ga) +  geom_sf()
ggplot(ga) +
geom_sf(fill = "beige") +
labs(title = "The fine state of Georgia") +
theme_minimal()
ggplot(ga) +
geom_sf(fill = "beige") +
labs(title = "The state of Georgia") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "orange") +
labs(title = "All roads lead to the ATL", fill = "Population") +
theme_minimal()
# Set the working directory (example, replace with your own file path)
setwd("C:\Users\lavgo\Documents\GitHub\myrepo\rtutorials")
# Set the working directory (example, replace with your own file path)
setwd("C:/Users/lavgo/Documents/GitHub/myrepo/rtutorials")
# If you haven't installed the packages before, use e.g.:
install.packages("sp")
install.packages("sp")
library(sp)
library(rgdal)
library(raster)
library(ggplot2)
library(viridis)
library(rasterVis)
tay <- raster(taycrop.tif)
tay <- raster('taycrop.tif')
tay
b1<- raster('taycrop.tif',band=1)
b2 <- raster('taycrop.tif', band=2)
b3 <- raster('taycrop.tif', band=3)
b4 <- raster('taycrop.tif', band=4)
b5 <- raster('taycrop.tif', band=5)
b6 <- raster('taycrop.tif', band=6)
b7 <- raster('taycrop.tif', band=7)
b8 <- raster('taycrop.tif', band=8)
b9 <- raster('taycrop.tif', band=9)
b10 <- raster('taycrop.tif', band=10)
b11 <- raster('taycrop.tif', band=11)
b12 <- raster('taycrop.tif', band=12)
compareRaster(b2,b3)
plot(b8)
image(b8)
plot(b8)
zoom(b8)
plot(b8)
par("mar")
par(mar=c(1,1,1,1))
plot(b8)
image(b8)
zoom(b8)
plot(tay)
e <-drawExtent()
cropped_tay <- crop(b7, e)
plot(cropped_tay)
image(b8, col= viridis_pal(option="D")(10), main="Sentinel 2 image of Loch Tay")
dev.off()
image(b8, col= viridis_pal(option="D")(10), main="Sentinel 2 image of Loch Tay")
dev.off()
#plot RGB composite
tayRGB <- stack(list(b4, b3, b2))              # creates raster stack
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "Sentinel RGB colour composite")
dev.off()
#plot RGB composite
tayRGB <- stack(list(b8, b4, b3))              # creates raster stack
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "Sentinel RGB colour composite")
dev.off()
styler:::set_style_transformers()
install.packages("colourpicker")
colourpicker:::colourPickerAddin()
#plot RGB composite
tayRGB <- stack(list(b8, b4, b3))              # creates raster stack
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "Sentinel RGB colour composite")
png('False_tay.png', width = 5, height = 4, units = "in", res = 300)
dev.off()
dev.off()
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b4) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b3) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b2) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=20),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=14),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
#plot using gplot
gplot(b8) +
geom_raster(aes(x = x, y = y, fill = value)) +
# value is the specific value of reflectance
scale_fill_viridis_c() +
coord_quickmap() +
ggtitle("West of Loch tay, raster plot") +
xlab("Longitude") +
ylab("Latitude") +
# removes grey background
theme_classic() +
# center plot title
theme(plot.title = element_text(hjust = 0.5),
# font size
text = element_text(size=11),
# rotates x axis text
axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
#visualize all bands
t <- stack(b1,b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12)
gplot(t)+
geom_raster(aes(x=x,y=y,fill=value))+
scale_fill_viridis_c()+
facet_wrap(~variable) +
coord_quickmap()+
ggtitle("Sentinel 2 Loch tay, raster plots")+
xlab("Long")+
ylab("Lat")+
theme_classic()+
theme(text=element_text(size=11),
axis.text.x=element_text(angle=90,hjust=1))+
theme(plot.title = element_text(hjust=0.5))
dev.off()
s_tay <- brick('taycrop.tif')
plot(s_tay)
plot(s_tay)
dev.off()
# Created a VI function (vegetation index)
VI <- function(img, k, i) {
bk <- img[[k]]
bi <- img[[i]]
vi <- (bk - bi) / (bk + bi)
return(vi)
}
ndvi <- VI(s_tay, 8, 4)
png('ndviplot.png', width = 4, height = 4, units = "in", res = 300)
# 8 and 4 refer to the bands we'll use
plot(ndvi, col = rev(terrain.colors(10)), main = 'Sentinel 2, Loch Tay-NDVI')
ndvi <- VI(s_tay, 8, 4)
# 8 and 4 refer to the bands we'll use
plot(ndvi, col = rev(terrain.colors(10)), main = 'Sentinel 2, Loch Tay-NDVI')
dev.off()
dev.off()
ndvi <- VI(s_tay, 8, 4)
# 8 and 4 refer to the bands we'll use
plot(ndvi, col = rev(terrain.colors(10)), main = 'Sentinel 2, Loch Tay-NDVI')
dev.off()
hist(ndvi,
main = "Distribution of NDVI values",
xlab = "NDVI",
ylab= "Frequency",
col = "aquamarine3",
xlim = c(-0.5, 1),
breaks = 30,
xaxt = 'n')
axis(side = 1, at = seq(-0.5,1, 0.05), labels = seq(-0.5,1, 0.05))
dev.off()
# Mask cells that have NDVI of less than 0.4 (less likely to be vegetation)
veg <- reclassify(ndvi, cbind(-Inf, 0.4, NA))
plot(veg, main = 'Veg cover')
dev.off()
writeRaster(x = ndvi,
#file path
filename="tay_ndvi_2018.tif",
# save as a tif
format = "GTiff",
# save as a INTEGER rather than a float
datatype = 'INT2S')
nr <-getValues(ndvi)
str(nr)
set.seed(99)
kmncluster <- kmeans(na.omit(nr), centers = 10, iter.max = 500,
nstart = 5, algorithm = "Lloyd")
str(kmncluster)
# First create a copy of the ndvi layer
knr <- ndvi
# Now replace raster cell values with kmncluster$cluster
# array
knr[] <- kmncluster$cluster
knr
par(mfrow = c(1, 2))
plot(ndvi, col = rev(terrain.colors(10)), main = "NDVI")
plot(knr, main = "Kmeans", col = viridis_pal(option = "D")(10))
dev.off()
par(mar = c(10.8, 5, 10.8, 2), mfrow = c(1, 2))
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "RGB")
plot(knr, main = "Kmeans", yaxt = 'n', col = viridis_pal(option = "D")(10))
dev.off()
#plot RGB composite
tayRGB <- stack(list(b4, b3, b2))              # creates raster stack
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "Sentinel RGB colour composite")
dev.off()
par(mar = c(10.8, 5, 10.8, 2), mfrow = c(1, 2))
plotRGB(tayRGB, axes = TRUE, stretch = "lin", main = "RGB")
plot(knr, main = "Kmeans", yaxt = 'n', col = viridis_pal(option = "D")(10))
dev.off()
